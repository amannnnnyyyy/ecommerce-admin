// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String      @id @default(uuid())
  name        String      @unique
  userId      String 
  billboards  Billboard[] @relation("StoreToBillboard")  
  categories  Category[]  @relation("storeToCategory") 
  products    Product[]   @relation("storeToProduct")
  sizes       Size[]      @relation("storeToSize")  
  Colors      Color[]     @relation("storeToColor")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}


model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBillboard",fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]  @relation("billboardToCategory")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}


model Category {
  id          String      @id @default(uuid())
  storeId     String      
  name        String
  store       Store       @relation("storeToCategory",fields: [storeId], references: [id])  
  billboardId String
  billboard   Billboard   @relation("billboardToCategory",fields: [billboardId], references: [id])  
  products    Product[]   @relation("categoryToProduct") 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}



model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("storeToSize", fields: [storeId], references: [id])
  products  Product[] 
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}


model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("storeToColor", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}


model Product {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("storeToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category  @relation("categoryToProduct", fields: [categoryId], references: [id])  
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String
  size        Size      @relation(fields: [sizeId], references: [id])  
  colorId     String
  color       Color     @relation(fields: [colorId], references: [id])  
  images      Image[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([sizeId])
  @@index([colorId])
  @@index([categoryId])
}


model Image {
  id           String     @id @default(uuid())
  productId    String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  url          String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([productId])
}

